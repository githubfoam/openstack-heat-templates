heat_template_version: 2016-10-14

description: >
  Simple template to build a windows instance w volume,network,security group,floating ip,

parameters: 
  VOLUME_NAME:
    type: string
    description: Name of the system volume of the Virtual Server
    default: Heat_Volume_01

  VOLUME_SIZE:
    type: string
    description: Volume size of the system volume of the Virtual Server
    default: 80

  AZ:
    type: string
    description: Name of the Availability Zone to deploy the Virtual Server in
    default: nova

  FLAVOR:
    type: string
    description: Name or ID of the Flavor type of the Virtual Server to create
    default: S-1

  IMAGE_ID:
    description: Image ID or image name to use for the Virtual Server
    default: 123ed3f8-1233-4b14-91c8-feb387d12345

  KEY_NAME:
    type: string
    description: Name of the existing key pair used for the Virtual Server
    default: Heat_Key_01

  SERVER_NAME:
    type: string
    description: Name of the Virtual Server to create
    default: Heat_Server_01

  NETWORK_NAME:
    type: string
    description: NAME of the Network to deploy the Virtual Server on
    default: Heat_Network_01

  NETWORK_ID:
    type: string
    description: ID of the Network to deploy the Virtual Server on
    default: 6eft72d8-a4ad-4h4f-8d2d-76soe8ba122b

  SECURITY_GROUP_NAME:
    type: comma_delimited_list
    description: ID of the Security Group associated with the Virtual Server
    default: Heat_Security_Group_01


resources:
  VOLUME_01:
    type: OS::Cinder::Volume
    properties: 
      name: { get_param: VOLUME_NAME }
      size: { get_param: VOLUME_SIZE }
      volume_type: M1
      image : { get_param: IMAGE_ID }
      availability_zone: { get_param: AZ }

  # HOST BASED . Different from NETWORK BASED FWaaS-Firewall
  Server_Security_Group:
    type: OS::Neutron::SecurityGroup
    depends_on: [ SERVER_01 ] # specific to heat_server
    properties:
      name: server security group
      description: >
        Security group rule to create
        Allows connection from remote IP (icmp, tcp22, 80, 443, 3389, 1688, 53, and udp 53)      
      rules:
         #1 ingress: ICMP/RemoteIP
         - { remote_ip_prefix: { get_param: REMOTE_IP }, direction: ingress, protocol: icmp }
         #2 ingress: TCP/SSH/22/RemoteIP
         - { remote_ip_prefix: { get_param: REMOTE_IP }, direction: ingress, protocol: tcp, port_range_min: 22, port_range_max: 22}
         #3 ingress: TCP/HTTP/80/RemoteIP
         - { remote_ip_prefix: { get_param: REMOTE_IP }, direction: ingress, protocol: tcp, port_range_min: 80, port_range_max: 80}
         #4 ingress: TCP/HTTPS/443/RemoteIP
         - { remote_ip_prefix: { get_param: REMOTE_IP }, direction: ingress, protocol: tcp, port_range_min: 443, port_range_max: 443}
         #5 ingress: TCP/RDP/3389/RemoteIP
         - { remote_ip_prefix: { get_param: REMOTE_IP }, direction: ingress, protocol: tcp, port_range_min: 3389, port_range_max: 3389}
         #6 ingress: TCP/KMS/1688/RemoteIP
         - { remote_ip_prefix: { get_param: REMOTE_IP }, direction: ingress, protocol: tcp, port_range_min: 1688, port_range_max: 1688}
         #7 ingress: TCP/DNS/53/RemoteIP
         - { remote_ip_prefix: { get_param: REMOTE_IP }, direction: ingress, protocol: tcp, port_range_min: 53, port_range_max: 53}
         #8 ingress: UDP/DNS/53/RemoteIP
         - { remote_ip_prefix: { get_param: REMOTE_IP }, direction: ingress, protocol: udp, port_range_min: 53, port_range_max: 53}
         
  SERVER_01:
    type: OS::Nova::Server
    properties:
      availability_zone: { get_param: AZ }
      block_device_mapping: [{"volume_size": { get_param: VOLUME_SIZE }, "volume_id": {get_resource: VOLUME_01 }, "delete_on_termination": True, "device_name": "/dev/vda" }]
      flavor: { get_param: FLAVOR }
      image: { get_param: IMAGE_ID }
      key_name: { get_param: KEY_NAME }
      name: { get_param: SERVER_NAME }
      networks: ["uuid": { get_param: NETWORK_ID }]
      security_groups: { get_param: SECURITY_GROUP_NAME }
      user_data_format: RAW
      user_data: |
        #ps1
        Rename-Computer -Force -NewName SampleNameWindowsV01 -Restart

  SERVER_Port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: NETWORK_NAME }
      security_groups:
        - { get_resource: Server_Security_Group }
      # fixed_ips:
      #   - subnet_id: { get_resource: heat_network_subnet }


outputs:
  SERVER_01_DETAIL:
    description: 
    value: { get_attr: [SERVER_01, show] }

  SERVER_01_NETWORK:
    description: 
    value: { get_attr: [SERVER_01, networks] }

  SERVER_01_IP:
    description: 
    value: { get_attr: [SERVER_01, addresses,{ get_param: NETWORK_NAME }, 0, port] }
            
            
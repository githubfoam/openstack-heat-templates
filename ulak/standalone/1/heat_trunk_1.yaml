heat_template_version: 2016-10-14

description: >
  Template creates the resources of a instance that needs access to several 
  networks, such as a protected intranet and an internet-enabled network. 
  A network trunk allows multiple networks to be connected to 
  a single port (vNIC) on an virtual machine so that multiple networks 
  can be presented to it,

parameters:
  server_name:
    type: string
    description: Name of server
    default: server0
  server_flavor:
    type: string
    description: Flavor server is based on
    default: "2_CPU.2GB_RAM"
  server_key:
    type: string
    description: Key pair used by server
    default: ubuntu_keys
  server_image:
    type: string
    description: Image server is based on
    default: "Ulakbim Ubuntu Server 16.04.LTS Cloud"
  app_port:
    type: number
    description: Port used by the servers
    default: 80
  virtual_router:
    type: string
    label: Private network name or ID
    description: Network to attach instance to.
    default: heat_router    
  internal_network:
    type: string
    description: Internal-network used by the servers 
    default: heat_network   
  internal_network_subnet:
    type: string
    description: Internal-subnet on which the load balancer will be located
    default: heat_subnet  
  vlan_network:
    type: string
    description: VLAN network used by server
    default: provider-network-vlan-1217  
  vlan_subnet:
    type: string
    description: Subnet used by server
    default: provider-subnet-1217
  vlan_id:
    type: number
    default: 1217

resources:

#router
  heat_router:
    type: OS::Neutron::Router #first build router
    properties:
      name: { get_param: virtual_router }
      # Update the stack by adding the following line to enable
      # the router to connect to external networks.
      external_gateway_info: {"network": {get_param: public_network} }
        # network:
        #   get_param: floating-network-id

  heat_router_interface:
    type: OS::Neutron::RouterInterface
    depends_on: [ heat_router ]
    properties:
      router_id: { get_resource: heat_router }
      subnet: { get_resource: heat_network_subnet }
      # subnet: testnetwork_subnet #existing network's subnet

  #network
  heat_network:
    type: OS::Neutron::Net
    depends_on: [ heat_router ] # network is built if virtual router is built
    depends_on:
      - heat_router     
    properties:
      admin_state_up: true
      name: { get_param: private_network }

  heat_network_subnet:
    type: OS::Neutron::Subnet
    depends_on: [ heat_network ]
    depends_on:
      - heat_network    
    properties:
      name: { get_param: subnet }
      subnet_created: True 
      network: { get_resource: heat_network }
      cidr: "10.1.1.0/24"
      dns_nameservers: ["8.8.8.8"]
      gateway_ip: "10.1.1.1"
      ip_version: 4

# https://docs.openstack.org/heat/pike/template_guide/index.html
  sec_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: { get_param: app_port }
          port_range_max: { get_param: app_port }
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp

  parent_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: internal_network }
      security_groups:
        - default
        - { get_resource: sec_group }
  subport0:
    type: OS::Neutron::Port
    properties:
      network: { get_param: vlan_network }
      mac_address: { get_attr: [parent_port, mac_address] }
      security_groups:
        - default
        - { get_resource: sec_group }
  trunk0:
    type: OS::Neutron::Trunk
    properties:
      port: { get_resource: parent_port }
      sub_ports:
        - { port: { get_resource: subport0 },
          segmentation_type: vlan,
          segmentation_id: { get_param: vlan_id } }

  instance0:
    type: OS::Nova::Server
    properties:
      name: {get_param: server_name}
      key_name: { get_param: server_key }
      flavor: { get_param: server_flavor }
      image: { get_param: server_image }
      networks:
        - { port: { get_attr: [trunk0, port_id] } }

outputs:
  parent_port/name:
    description: Name of parent port
    value: { get_attr: [parent_port, name] }
  parent_port/mac_adress:
    description: MAC address of parent port
    value: { get_attr: [parent_port, mac_address] }
  parent_port/fixed_ips:
    description: IP address of parent port
    value: { get_attr: [parent_port, fixed_ips] }
  subport0/name:
    description: Name of subport
    value: { get_attr: [subport0, name] }
  subport0/mac_address:
    description: MAC address of subport
    value: { get_attr: [subport0, mac_address] }
  subport0/fixed_ips:
    description: IP address of subport
    value: { get_attr: [subport0, fixed_ips] }